// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package keyvalue represents the interface "fermyon:spin/key-value".
package keyvalue

import (
	"github.com/ydnar/wasm-tools-go/cm"
)

// Error represents the variant "fermyon:spin/key-value#error".
//
// The set of errors which may be raised by functions in this interface
//
//	variant error {
//		store-table-full,
//		no-such-store,
//		access-denied,
//		invalid-store,
//		no-such-key,
//		io(string),
//	}
type Error cm.Variant[uint8, string, string]

// ErrorStoreTableFull returns a [Error] of case "store-table-full".
//
// Too many stores have been opened simultaneously. Closing one or more
// stores prior to retrying may address this.
func ErrorStoreTableFull() Error {
	var data struct{}
	return cm.New[Error](0, data)
}

// StoreTableFull returns true if [Error] represents the variant case "store-table-full".
func (self *Error) StoreTableFull() bool {
	return cm.Tag(self) == 0
}

// ErrorNoSuchStore returns a [Error] of case "no-such-store".
//
// The host does not recognize the store name requested.  Defining and
// configuring a store with that name in a runtime configuration file
// may address this.
func ErrorNoSuchStore() Error {
	var data struct{}
	return cm.New[Error](1, data)
}

// NoSuchStore returns true if [Error] represents the variant case "no-such-store".
func (self *Error) NoSuchStore() bool {
	return cm.Tag(self) == 1
}

// ErrorAccessDenied returns a [Error] of case "access-denied".
//
// The requesting component does not have access to the specified store
// (which may or may not exist).
func ErrorAccessDenied() Error {
	var data struct{}
	return cm.New[Error](2, data)
}

// AccessDenied returns true if [Error] represents the variant case "access-denied".
func (self *Error) AccessDenied() bool {
	return cm.Tag(self) == 2
}

// ErrorInvalidStore returns a [Error] of case "invalid-store".
//
// The store handle provided is not recognized, i.e. it was either never
// opened or has been closed.
func ErrorInvalidStore() Error {
	var data struct{}
	return cm.New[Error](3, data)
}

// InvalidStore returns true if [Error] represents the variant case "invalid-store".
func (self *Error) InvalidStore() bool {
	return cm.Tag(self) == 3
}

// ErrorNoSuchKey returns a [Error] of case "no-such-key".
//
// No key-value tuple exists for the specified key in the specified
// store.
func ErrorNoSuchKey() Error {
	var data struct{}
	return cm.New[Error](4, data)
}

// NoSuchKey returns true if [Error] represents the variant case "no-such-key".
func (self *Error) NoSuchKey() bool {
	return cm.Tag(self) == 4
}

// ErrorIO returns a [Error] of case "io".
//
// Some implementation-specific error has occurred (e.g. I/O)
func ErrorIO(data string) Error {
	return cm.New[Error](5, data)
}

// IO returns a non-nil *[string] if [Error] represents the variant case "io".
func (self *Error) IO() *string {
	return cm.Case[string](self, 5)
}

// Store represents the type "fermyon:spin/key-value#store".
//
// A handle to an open key-value store
//
//	type store = u32
type Store uint32

// Close represents function "fermyon:spin/key-value#close".
//
// Close the specified `store`.
//
// This has no effect if `store` is not a valid handle to an open store.
//
//	close: func(store: store)
//
//go:nosplit
func Close(store Store) {
	wasmimport_Close(store)
}

//go:wasmimport fermyon:spin/key-value close
//go:noescape
func wasmimport_Close(store Store)

// Delete represents function "fermyon:spin/key-value#delete".
//
// Delete the tuple with the specified `key` from the specified `store`.
//
// `error::invalid-store` will be raised if `store` is not a valid handle
// to an open store.  No error is raised if a tuple did not previously
// exist for `key`.
//
//	delete: func(store: store, key: string) -> result<_, error>
//
//go:nosplit
func Delete(store Store, key string) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	wasmimport_Delete(store, key, &result)
	return result
}

//go:wasmimport fermyon:spin/key-value delete
//go:noescape
func wasmimport_Delete(store Store, key string, result *cm.ErrResult[struct{}, Error])

// Exists represents function "fermyon:spin/key-value#exists".
//
// Return whether a tuple exists for the specified `key` in the specified
// `store`.
//
// `error::invalid-store` will be raised if `store` is not a valid handle
// to an open store.
//
//	exists: func(store: store, key: string) -> result<bool, error>
//
//go:nosplit
func Exists(store Store, key string) cm.ErrResult[bool, Error] {
	var result cm.ErrResult[bool, Error]
	wasmimport_Exists(store, key, &result)
	return result
}

//go:wasmimport fermyon:spin/key-value exists
//go:noescape
func wasmimport_Exists(store Store, key string, result *cm.ErrResult[bool, Error])

// Get represents function "fermyon:spin/key-value#get".
//
// Get the value associated with the specified `key` from the specified
// `store`.
//
// `error::invalid-store` will be raised if `store` is not a valid handle
// to an open store, and `error::no-such-key` will be raised if there is no
// tuple for `key` in `store`.
//
//	get: func(store: store, key: string) -> result<list<u8>, error>
//
//go:nosplit
func Get(store Store, key string) cm.ErrResult[cm.List[uint8], Error] {
	var result cm.ErrResult[cm.List[uint8], Error]
	wasmimport_Get(store, key, &result)
	return result
}

//go:wasmimport fermyon:spin/key-value get
//go:noescape
func wasmimport_Get(store Store, key string, result *cm.ErrResult[cm.List[uint8], Error])

// GetKeys represents function "fermyon:spin/key-value#get-keys".
//
// Return a list of all the keys in the specified `store`.
//
// `error::invalid-store` will be raised if `store` is not a valid handle
// to an open store.
//
//	get-keys: func(store: store) -> result<list<string>, error>
//
//go:nosplit
func GetKeys(store Store) cm.ErrResult[cm.List[string], Error] {
	var result cm.ErrResult[cm.List[string], Error]
	wasmimport_GetKeys(store, &result)
	return result
}

//go:wasmimport fermyon:spin/key-value get-keys
//go:noescape
func wasmimport_GetKeys(store Store, result *cm.ErrResult[cm.List[string], Error])

// Open represents function "fermyon:spin/key-value#open".
//
// Open the store with the specified name.
//
// If `name` is "default", the default store is opened.  Otherwise,
// `name` must refer to a store defined and configured in a runtime
// configuration file supplied with the application.
//
// `error::no-such-store` will be raised if the `name` is not recognized.
//
//	open: func(name: string) -> result<store, error>
//
//go:nosplit
func Open(name string) cm.ErrResult[Store, Error] {
	var result cm.ErrResult[Store, Error]
	wasmimport_Open(name, &result)
	return result
}

//go:wasmimport fermyon:spin/key-value open
//go:noescape
func wasmimport_Open(name string, result *cm.ErrResult[Store, Error])

// Set represents function "fermyon:spin/key-value#set".
//
// Set the `value` associated with the specified `key` in the specified
// `store`, overwriting any existing value.
//
// `error::invalid-store` will be raised if `store` is not a valid handle
// to an open store.
//
//	set: func(store: store, key: string, value: list<u8>) -> result<_, error>
//
//go:nosplit
func Set(store Store, key string, value cm.List[uint8]) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	wasmimport_Set(store, key, value, &result)
	return result
}

//go:wasmimport fermyon:spin/key-value set
//go:noescape
func wasmimport_Set(store Store, key string, value cm.List[uint8], result *cm.ErrResult[struct{}, Error])
