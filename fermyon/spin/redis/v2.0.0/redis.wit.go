// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package redis represents the interface "fermyon:spin/redis@2.0.0".
package redis

import (
	"github.com/ydnar/wasm-tools-go/cm"
)

// Connection represents the resource "fermyon:spin/redis@2.0.0#connection".
//
//	resource connection
type Connection cm.Resource

// ResourceDrop represents the Canonical ABI function "resource-drop".
//
// Drops a resource handle.
//
//go:nosplit
func (self Connection) ResourceDrop() {
	self.wasmimport_ResourceDrop()
}

//go:wasmimport fermyon:spin/redis@2.0.0 [resource-drop]connection
//go:noescape
func (self Connection) wasmimport_ResourceDrop()

// ConnectionOpen represents static function "open".
//
// Open a connection to the Redis instance at `address`.
//
//	open: static func(address: string) -> result<own<connection>, error>
//
//go:nosplit
func ConnectionOpen(address string) cm.ErrResult[Connection, Error] {
	var result cm.ErrResult[Connection, Error]
	wasmimport_ConnectionOpen(address, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [static]connection.open
//go:noescape
func wasmimport_ConnectionOpen(address string, result *cm.ErrResult[Connection, Error])

// Del represents method "del".
//
// Removes the specified keys.
//
// A key is ignored if it does not exist. Returns the number of keys deleted.
//
//	del: func(keys: list<string>) -> result<u32, error>
//
//go:nosplit
func (self Connection) Del(keys cm.List[string]) cm.ErrResult[uint32, Error] {
	var result cm.ErrResult[uint32, Error]
	self.wasmimport_Del(keys, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.del
//go:noescape
func (self Connection) wasmimport_Del(keys cm.List[string], result *cm.ErrResult[uint32, Error])

// Execute represents method "execute".
//
// Execute an arbitrary Redis command and receive the result.
//
//	execute: func(command: string, arguments: list<redis-parameter>) -> result<list<redis-result>,
//	error>
//
//go:nosplit
func (self Connection) Execute(command string, arguments cm.List[RedisParameter]) cm.ErrResult[cm.List[RedisResult], Error] {
	var result cm.ErrResult[cm.List[RedisResult], Error]
	self.wasmimport_Execute(command, arguments, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.execute
//go:noescape
func (self Connection) wasmimport_Execute(command string, arguments cm.List[RedisParameter], result *cm.ErrResult[cm.List[RedisResult], Error])

// Get represents method "get".
//
// Get the value of a key.
//
//	get: func(key: string) -> result<option<payload>, error>
//
//go:nosplit
func (self Connection) Get(key string) cm.OKResult[cm.Option[Payload], Error] {
	var result cm.OKResult[cm.Option[Payload], Error]
	self.wasmimport_Get(key, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.get
//go:noescape
func (self Connection) wasmimport_Get(key string, result *cm.OKResult[cm.Option[Payload], Error])

// Incr represents method "incr".
//
// Increments the number stored at key by one.
//
// If the key does not exist, it is set to 0 before performing the operation.
// An `error::type-error` is returned if the key contains a value of the wrong type
// or contains a string that can not be represented as integer.
//
//	incr: func(key: string) -> result<s64, error>
//
//go:nosplit
func (self Connection) Incr(key string) cm.ErrResult[int64, Error] {
	var result cm.ErrResult[int64, Error]
	self.wasmimport_Incr(key, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.incr
//go:noescape
func (self Connection) wasmimport_Incr(key string, result *cm.ErrResult[int64, Error])

// Publish represents method "publish".
//
// Publish a Redis message to the specified channel.
//
//	publish: func(channel: string, payload: payload) -> result<_, error>
//
//go:nosplit
func (self Connection) Publish(channel string, payload Payload) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	self.wasmimport_Publish(channel, payload, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.publish
//go:noescape
func (self Connection) wasmimport_Publish(channel string, payload Payload, result *cm.ErrResult[struct{}, Error])

// Sadd represents method "sadd".
//
// Add the specified `values` to the set named `key`, returning the number of newly-added
// values.
//
//	sadd: func(key: string, values: list<string>) -> result<u32, error>
//
//go:nosplit
func (self Connection) Sadd(key string, values cm.List[string]) cm.ErrResult[uint32, Error] {
	var result cm.ErrResult[uint32, Error]
	self.wasmimport_Sadd(key, values, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.sadd
//go:noescape
func (self Connection) wasmimport_Sadd(key string, values cm.List[string], result *cm.ErrResult[uint32, Error])

// Set represents method "set".
//
// Set key to value.
//
// If key already holds a value, it is overwritten.
//
//	set: func(key: string, value: payload) -> result<_, error>
//
//go:nosplit
func (self Connection) Set(key string, value Payload) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	self.wasmimport_Set(key, value, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.set
//go:noescape
func (self Connection) wasmimport_Set(key string, value Payload, result *cm.ErrResult[struct{}, Error])

// Smembers represents method "smembers".
//
// Retrieve the contents of the set named `key`.
//
//	smembers: func(key: string) -> result<list<string>, error>
//
//go:nosplit
func (self Connection) Smembers(key string) cm.ErrResult[cm.List[string], Error] {
	var result cm.ErrResult[cm.List[string], Error]
	self.wasmimport_Smembers(key, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.smembers
//go:noescape
func (self Connection) wasmimport_Smembers(key string, result *cm.ErrResult[cm.List[string], Error])

// Srem represents method "srem".
//
// Remove the specified `values` from the set named `key`, returning the number of
// newly-removed values.
//
//	srem: func(key: string, values: list<string>) -> result<u32, error>
//
//go:nosplit
func (self Connection) Srem(key string, values cm.List[string]) cm.ErrResult[uint32, Error] {
	var result cm.ErrResult[uint32, Error]
	self.wasmimport_Srem(key, values, &result)
	return result
}

//go:wasmimport fermyon:spin/redis@2.0.0 [method]connection.srem
//go:noescape
func (self Connection) wasmimport_Srem(key string, values cm.List[string], result *cm.ErrResult[uint32, Error])

// Error represents the variant "fermyon:spin/redis@2.0.0#error".
//
// Errors related to interacting with Redis
//
//	variant error {
//		invalid-address,
//		too-many-connections,
//		type-error,
//		other(string),
//	}
type Error cm.Variant[uint8, string, string]

// ErrorInvalidAddress returns a [Error] of case "invalid-address".
//
// An invalid address string
func ErrorInvalidAddress() Error {
	var data struct{}
	return cm.New[Error](0, data)
}

// InvalidAddress returns true if [Error] represents the variant case "invalid-address".
func (self *Error) InvalidAddress() bool {
	return cm.Tag(self) == 0
}

// ErrorTooManyConnections returns a [Error] of case "too-many-connections".
//
// There are too many open connections
func ErrorTooManyConnections() Error {
	var data struct{}
	return cm.New[Error](1, data)
}

// TooManyConnections returns true if [Error] represents the variant case "too-many-connections".
func (self *Error) TooManyConnections() bool {
	return cm.Tag(self) == 1
}

// ErrorTypeError returns a [Error] of case "type-error".
//
// A retrieved value was not of the correct type
func ErrorTypeError() Error {
	var data struct{}
	return cm.New[Error](2, data)
}

// TypeError returns true if [Error] represents the variant case "type-error".
func (self *Error) TypeError() bool {
	return cm.Tag(self) == 2
}

// ErrorOther returns a [Error] of case "other".
//
// Some other error occurred
func ErrorOther(data string) Error {
	return cm.New[Error](3, data)
}

// Other returns a non-nil *[string] if [Error] represents the variant case "other".
func (self *Error) Other() *string {
	return cm.Case[string](self, 3)
}

// Payload represents the list "fermyon:spin/redis@2.0.0#payload".
//
// The message payload.
//
//	type payload = list<u8>
type Payload cm.List[uint8]

// RedisParameter represents the variant "fermyon:spin/redis@2.0.0#redis-parameter".
//
// A parameter type for the general-purpose `execute` function.
//
//	variant redis-parameter {
//		int64(s64),
//		binary(payload),
//	}
type RedisParameter cm.Variant[uint8, Payload, int64]

// RedisParameterInt64 returns a [RedisParameter] of case "int64".
func RedisParameterInt64(data int64) RedisParameter {
	return cm.New[RedisParameter](0, data)
}

// Int64 returns a non-nil *[int64] if [RedisParameter] represents the variant case "int64".
func (self *RedisParameter) Int64() *int64 {
	return cm.Case[int64](self, 0)
}

// RedisParameterBinary returns a [RedisParameter] of case "binary".
func RedisParameterBinary(data Payload) RedisParameter {
	return cm.New[RedisParameter](1, data)
}

// Binary returns a non-nil *[Payload] if [RedisParameter] represents the variant case "binary".
func (self *RedisParameter) Binary() *Payload {
	return cm.Case[Payload](self, 1)
}

// RedisResult represents the variant "fermyon:spin/redis@2.0.0#redis-result".
//
// A return type for the general-purpose `execute` function.
//
//	variant redis-result {
//		nil,
//		status(string),
//		int64(s64),
//		binary(payload),
//	}
type RedisResult cm.Variant[uint8, string, int64]

// RedisResultNil returns a [RedisResult] of case "nil".
func RedisResultNil() RedisResult {
	var data struct{}
	return cm.New[RedisResult](0, data)
}

// Nil returns true if [RedisResult] represents the variant case "nil".
func (self *RedisResult) Nil() bool {
	return cm.Tag(self) == 0
}

// RedisResultStatus returns a [RedisResult] of case "status".
func RedisResultStatus(data string) RedisResult {
	return cm.New[RedisResult](1, data)
}

// Status returns a non-nil *[string] if [RedisResult] represents the variant case "status".
func (self *RedisResult) Status() *string {
	return cm.Case[string](self, 1)
}

// RedisResultInt64 returns a [RedisResult] of case "int64".
func RedisResultInt64(data int64) RedisResult {
	return cm.New[RedisResult](2, data)
}

// Int64 returns a non-nil *[int64] if [RedisResult] represents the variant case "int64".
func (self *RedisResult) Int64() *int64 {
	return cm.Case[int64](self, 2)
}

// RedisResultBinary returns a [RedisResult] of case "binary".
func RedisResultBinary(data Payload) RedisResult {
	return cm.New[RedisResult](3, data)
}

// Binary returns a non-nil *[Payload] if [RedisResult] represents the variant case "binary".
func (self *RedisResult) Binary() *Payload {
	return cm.Case[Payload](self, 3)
}
