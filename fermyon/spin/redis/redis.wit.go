// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package redis represents the interface "fermyon:spin/redis".
package redis

import (
	redistypes "github.com/rajatjindal/wasip2-golang/fermyon/spin/redis-types"
	"github.com/ydnar/wasm-tools-go/cm"
)

// Error represents the enum "fermyon:spin/redis-types#error".
//
// See [redistypes.Error] for more information.
type Error = redistypes.Error

// Payload represents the list "fermyon:spin/redis-types#payload".
//
// See [redistypes.Payload] for more information.
type Payload = redistypes.Payload

// RedisParameter represents the variant "fermyon:spin/redis-types#redis-parameter".
//
// See [redistypes.RedisParameter] for more information.
type RedisParameter = redistypes.RedisParameter

// RedisResult represents the variant "fermyon:spin/redis-types#redis-result".
//
// See [redistypes.RedisResult] for more information.
type RedisResult = redistypes.RedisResult

// Del represents function "fermyon:spin/redis#del".
//
// Removes the specified keys. A key is ignored if it does not exist.
//
//	del: func(address: string, keys: list<string>) -> result<s64, error>
//
//go:nosplit
func Del(address string, keys cm.List[string]) cm.OKResult[int64, Error] {
	var result cm.OKResult[int64, Error]
	wasmimport_Del(address, keys, &result)
	return result
}

//go:wasmimport fermyon:spin/redis del
//go:noescape
func wasmimport_Del(address string, keys cm.List[string], result *cm.OKResult[int64, Error])

// Execute represents function "fermyon:spin/redis#execute".
//
// Execute an arbitrary Redis command and receive the result.
//
//	execute: func(address: string, command: string, arguments: list<redis-parameter>)
//	-> result<list<redis-result>, error>
//
//go:nosplit
func Execute(address string, command string, arguments cm.List[RedisParameter]) cm.OKResult[cm.List[RedisResult], Error] {
	var result cm.OKResult[cm.List[RedisResult], Error]
	wasmimport_Execute(address, command, arguments, &result)
	return result
}

//go:wasmimport fermyon:spin/redis execute
//go:noescape
func wasmimport_Execute(address string, command string, arguments cm.List[RedisParameter], result *cm.OKResult[cm.List[RedisResult], Error])

// Get represents function "fermyon:spin/redis#get".
//
// Get the value of a key.
//
//	get: func(address: string, key: string) -> result<payload, error>
//
//go:nosplit
func Get(address string, key string) cm.OKResult[Payload, Error] {
	var result cm.OKResult[Payload, Error]
	wasmimport_Get(address, key, &result)
	return result
}

//go:wasmimport fermyon:spin/redis get
//go:noescape
func wasmimport_Get(address string, key string, result *cm.OKResult[Payload, Error])

// Incr represents function "fermyon:spin/redis#incr".
//
// Increments the number stored at key by one. If the key does not exist, it is set
// to 0 before performing the operation.
// An error is returned if the key contains a value of the wrong type or contains
// a string that can not be represented as integer.
//
//	incr: func(address: string, key: string) -> result<s64, error>
//
//go:nosplit
func Incr(address string, key string) cm.OKResult[int64, Error] {
	var result cm.OKResult[int64, Error]
	wasmimport_Incr(address, key, &result)
	return result
}

//go:wasmimport fermyon:spin/redis incr
//go:noescape
func wasmimport_Incr(address string, key string, result *cm.OKResult[int64, Error])

// Publish represents function "fermyon:spin/redis#publish".
//
// Publish a Redis message to the specificed channel and return an error, if any.
//
//	publish: func(address: string, channel: string, payload: payload) -> result<_,
//	error>
//
//go:nosplit
func Publish(address string, channel string, payload Payload) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	wasmimport_Publish(address, channel, payload, &result)
	return result
}

//go:wasmimport fermyon:spin/redis publish
//go:noescape
func wasmimport_Publish(address string, channel string, payload Payload, result *cm.ErrResult[struct{}, Error])

// Sadd represents function "fermyon:spin/redis#sadd".
//
// Add the specified `values` to the set named `key`, returning the number of newly-added
// values.
//
//	sadd: func(address: string, key: string, values: list<string>) -> result<s64, error>
//
//go:nosplit
func Sadd(address string, key string, values cm.List[string]) cm.OKResult[int64, Error] {
	var result cm.OKResult[int64, Error]
	wasmimport_Sadd(address, key, values, &result)
	return result
}

//go:wasmimport fermyon:spin/redis sadd
//go:noescape
func wasmimport_Sadd(address string, key string, values cm.List[string], result *cm.OKResult[int64, Error])

// Set represents function "fermyon:spin/redis#set".
//
// Set key to value. If key alreads holds a value, it is overwritten.
//
//	set: func(address: string, key: string, value: payload) -> result<_, error>
//
//go:nosplit
func Set(address string, key string, value Payload) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	wasmimport_Set(address, key, value, &result)
	return result
}

//go:wasmimport fermyon:spin/redis set
//go:noescape
func wasmimport_Set(address string, key string, value Payload, result *cm.ErrResult[struct{}, Error])

// Smembers represents function "fermyon:spin/redis#smembers".
//
// Retrieve the contents of the set named `key`.
//
//	smembers: func(address: string, key: string) -> result<list<string>, error>
//
//go:nosplit
func Smembers(address string, key string) cm.OKResult[cm.List[string], Error] {
	var result cm.OKResult[cm.List[string], Error]
	wasmimport_Smembers(address, key, &result)
	return result
}

//go:wasmimport fermyon:spin/redis smembers
//go:noescape
func wasmimport_Smembers(address string, key string, result *cm.OKResult[cm.List[string], Error])

// Srem represents function "fermyon:spin/redis#srem".
//
// Remove the specified `values` from the set named `key`, returning the number of
// newly-removed values.
//
//	srem: func(address: string, key: string, values: list<string>) -> result<s64, error>
//
//go:nosplit
func Srem(address string, key string, values cm.List[string]) cm.OKResult[int64, Error] {
	var result cm.OKResult[int64, Error]
	wasmimport_Srem(address, key, values, &result)
	return result
}

//go:wasmimport fermyon:spin/redis srem
//go:noescape
func wasmimport_Srem(address string, key string, values cm.List[string], result *cm.OKResult[int64, Error])
