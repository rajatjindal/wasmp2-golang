// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package mysql represents the interface "fermyon:spin/mysql".
package mysql

import (
	rdbmstypes "github.com/rajatjindal/wasip2-golang/fermyon/spin/rdbms-types"
	"github.com/ydnar/wasm-tools-go/cm"
)

// MysqlError represents the variant "fermyon:spin/mysql#mysql-error".
//
// General purpose error.
//
//	variant mysql-error {
//		success,
//		connection-failed(string),
//		bad-parameter(string),
//		query-failed(string),
//		value-conversion-failed(string),
//		other-error(string),
//	}
type MysqlError cm.Variant[uint8, string, string]

// MysqlErrorSuccess returns a [MysqlError] of case "success".
func MysqlErrorSuccess() MysqlError {
	var data struct{}
	return cm.New[MysqlError](0, data)
}

// Success returns true if [MysqlError] represents the variant case "success".
func (self *MysqlError) Success() bool {
	return cm.Tag(self) == 0
}

// MysqlErrorConnectionFailed returns a [MysqlError] of case "connection-failed".
func MysqlErrorConnectionFailed(data string) MysqlError {
	return cm.New[MysqlError](1, data)
}

// ConnectionFailed returns a non-nil *[string] if [MysqlError] represents the variant case "connection-failed".
func (self *MysqlError) ConnectionFailed() *string {
	return cm.Case[string](self, 1)
}

// MysqlErrorBadParameter returns a [MysqlError] of case "bad-parameter".
func MysqlErrorBadParameter(data string) MysqlError {
	return cm.New[MysqlError](2, data)
}

// BadParameter returns a non-nil *[string] if [MysqlError] represents the variant case "bad-parameter".
func (self *MysqlError) BadParameter() *string {
	return cm.Case[string](self, 2)
}

// MysqlErrorQueryFailed returns a [MysqlError] of case "query-failed".
func MysqlErrorQueryFailed(data string) MysqlError {
	return cm.New[MysqlError](3, data)
}

// QueryFailed returns a non-nil *[string] if [MysqlError] represents the variant case "query-failed".
func (self *MysqlError) QueryFailed() *string {
	return cm.Case[string](self, 3)
}

// MysqlErrorValueConversionFailed returns a [MysqlError] of case "value-conversion-failed".
func MysqlErrorValueConversionFailed(data string) MysqlError {
	return cm.New[MysqlError](4, data)
}

// ValueConversionFailed returns a non-nil *[string] if [MysqlError] represents the variant case "value-conversion-failed".
func (self *MysqlError) ValueConversionFailed() *string {
	return cm.Case[string](self, 4)
}

// MysqlErrorOtherError returns a [MysqlError] of case "other-error".
func MysqlErrorOtherError(data string) MysqlError {
	return cm.New[MysqlError](5, data)
}

// OtherError returns a non-nil *[string] if [MysqlError] represents the variant case "other-error".
func (self *MysqlError) OtherError() *string {
	return cm.Case[string](self, 5)
}

// ParameterValue represents the variant "fermyon:spin/rdbms-types#parameter-value".
//
// See [rdbmstypes.ParameterValue] for more information.
type ParameterValue = rdbmstypes.ParameterValue

// RowSet represents the record "fermyon:spin/rdbms-types#row-set".
//
// See [rdbmstypes.RowSet] for more information.
type RowSet = rdbmstypes.RowSet

// Execute represents function "fermyon:spin/mysql#execute".
//
// execute command to the database: insert, update, delete
//
//	execute: func(address: string, statement: string, params: list<parameter-value>)
//	-> result<_, mysql-error>
//
//go:nosplit
func Execute(address string, statement string, params cm.List[ParameterValue]) cm.ErrResult[struct{}, MysqlError] {
	var result cm.ErrResult[struct{}, MysqlError]
	wasmimport_Execute(address, statement, params, &result)
	return result
}

//go:wasmimport fermyon:spin/mysql execute
//go:noescape
func wasmimport_Execute(address string, statement string, params cm.List[ParameterValue], result *cm.ErrResult[struct{}, MysqlError])

// Query represents function "fermyon:spin/mysql#query".
//
// query the database: select
//
//	query: func(address: string, statement: string, params: list<parameter-value>)
//	-> result<row-set, mysql-error>
//
//go:nosplit
func Query(address string, statement string, params cm.List[ParameterValue]) cm.OKResult[RowSet, MysqlError] {
	var result cm.OKResult[RowSet, MysqlError]
	wasmimport_Query(address, statement, params, &result)
	return result
}

//go:wasmimport fermyon:spin/mysql query
//go:noescape
func wasmimport_Query(address string, statement string, params cm.List[ParameterValue], result *cm.OKResult[RowSet, MysqlError])
