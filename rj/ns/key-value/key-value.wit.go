// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package keyvalue represents the interface "rj:ns/key-value@2.0.0".
package keyvalue

import (
	"github.com/ydnar/wasm-tools-go/cm"
)

// Error represents the variant "rj:ns/key-value@2.0.0#error".
//
// The set of errors which may be raised by functions in this interface
//
//	variant error {
//		store-table-full,
//		no-such-store,
//		access-denied,
//		other(string),
//	}
type Error cm.Variant[uint8, string, string]

// ErrorStoreTableFull returns a [Error] of case "store-table-full".
//
// Too many stores have been opened simultaneously. Closing one or more
// stores prior to retrying may address this.
func ErrorStoreTableFull() Error {
	var data struct{}
	return cm.New[Error](0, data)
}

// StoreTableFull returns true if [Error] represents the variant case "store-table-full".
func (self *Error) StoreTableFull() bool {
	return cm.Tag(self) == 0
}

// ErrorNoSuchStore returns a [Error] of case "no-such-store".
//
// The host does not recognize the store label requested.
func ErrorNoSuchStore() Error {
	var data struct{}
	return cm.New[Error](1, data)
}

// NoSuchStore returns true if [Error] represents the variant case "no-such-store".
func (self *Error) NoSuchStore() bool {
	return cm.Tag(self) == 1
}

// ErrorAccessDenied returns a [Error] of case "access-denied".
//
// The requesting component does not have access to the specified store
// (which may or may not exist).
func ErrorAccessDenied() Error {
	var data struct{}
	return cm.New[Error](2, data)
}

// AccessDenied returns true if [Error] represents the variant case "access-denied".
func (self *Error) AccessDenied() bool {
	return cm.Tag(self) == 2
}

// ErrorOther returns a [Error] of case "other".
//
// Some implementation-specific error has occurred (e.g. I/O)
func ErrorOther(data string) Error {
	return cm.New[Error](3, data)
}

// Other returns a non-nil *[string] if [Error] represents the variant case "other".
func (self *Error) Other() *string {
	return cm.Case[string](self, 3)
}

// Store represents the resource "rj:ns/key-value@2.0.0#store".
//
// An open key-value store
//
//	resource store
type Store cm.Resource

// ResourceDrop represents the Canonical ABI function "resource-drop".
//
// Drops a resource handle.
//
//go:nosplit
func (self Store) ResourceDrop() {
	self.wasmimport_ResourceDrop()
}

//go:wasmimport rj:ns/key-value@2.0.0 [resource-drop]store
//go:noescape
func (self Store) wasmimport_ResourceDrop()

// StoreOpen represents static function "open".
//
// Open the store with the specified label.
//
// `label` must refer to a store allowed in the spin.toml manifest.
//
// `error::no-such-store` will be raised if the `label` is not recognized.
//
//	open: static func(label: string) -> result<own<store>, error>
//
//go:nosplit
func StoreOpen(label string) cm.ErrResult[Store, Error] {
	var result cm.ErrResult[Store, Error]
	wasmimport_StoreOpen(label, &result)
	return result
}

//go:wasmimport rj:ns/key-value@2.0.0 [static]store.open
//go:noescape
func wasmimport_StoreOpen(label string, result *cm.ErrResult[Store, Error])

// Delete represents method "delete".
//
// Delete the tuple with the specified `key`
//
// No error is raised if a tuple did not previously exist for `key`.
//
//	delete: func(key: string) -> result<_, error>
//
//go:nosplit
func (self Store) Delete(key string) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	self.wasmimport_Delete(key, &result)
	return result
}

//go:wasmimport rj:ns/key-value@2.0.0 [method]store.delete
//go:noescape
func (self Store) wasmimport_Delete(key string, result *cm.ErrResult[struct{}, Error])

// Exists represents method "exists".
//
// Return whether a tuple exists for the specified `key`
//
//	exists: func(key: string) -> result<bool, error>
//
//go:nosplit
func (self Store) Exists(key string) cm.ErrResult[bool, Error] {
	var result cm.ErrResult[bool, Error]
	self.wasmimport_Exists(key, &result)
	return result
}

//go:wasmimport rj:ns/key-value@2.0.0 [method]store.exists
//go:noescape
func (self Store) wasmimport_Exists(key string, result *cm.ErrResult[bool, Error])

// Get represents method "get".
//
// Get the value associated with the specified `key`
//
// Returns `ok(none)` if the key does not exist.
//
//	get: func(key: string) -> result<option<list<u8>>, error>
//
//go:nosplit
func (self Store) Get(key string) cm.OKResult[cm.Option[cm.List[uint8]], Error] {
	var result cm.OKResult[cm.Option[cm.List[uint8]], Error]
	self.wasmimport_Get(key, &result)
	return result
}

//go:wasmimport rj:ns/key-value@2.0.0 [method]store.get
//go:noescape
func (self Store) wasmimport_Get(key string, result *cm.OKResult[cm.Option[cm.List[uint8]], Error])

// GetKeys represents method "get-keys".
//
// Return a list of all the keys
//
//	get-keys: func() -> result<list<string>, error>
//
//go:nosplit
func (self Store) GetKeys() cm.ErrResult[cm.List[string], Error] {
	var result cm.ErrResult[cm.List[string], Error]
	self.wasmimport_GetKeys(&result)
	return result
}

//go:wasmimport rj:ns/key-value@2.0.0 [method]store.get-keys
//go:noescape
func (self Store) wasmimport_GetKeys(result *cm.ErrResult[cm.List[string], Error])

// Set represents method "set".
//
// Set the `value` associated with the specified `key` overwriting any existing value.
//
//	set: func(key: string, value: list<u8>) -> result<_, error>
//
//go:nosplit
func (self Store) Set(key string, value cm.List[uint8]) cm.ErrResult[struct{}, Error] {
	var result cm.ErrResult[struct{}, Error]
	self.wasmimport_Set(key, value, &result)
	return result
}

//go:wasmimport rj:ns/key-value@2.0.0 [method]store.set
//go:noescape
func (self Store) wasmimport_Set(key string, value cm.List[uint8], result *cm.ErrResult[struct{}, Error])
