// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package outgoinghandler represents the interface "wasi:http/outgoing-handler@0.2.0-rc-2023-10-18".
//
// The `wasi:http/outgoing-handler` interface is meant to be imported by
// components and implemented by the host.
//
// NOTE: in Preview3, this interface will be merged with
// `wasi:http/outgoing-handler` into a single `wasi:http/handler` interface
// that takes a `request` parameter and returns a `response` result.
package outgoinghandler

import (
	types "github.com/rajatjindal/wasip2-golang/wasi/http/types/v0.2.0-rc-2023-10-18"
	"github.com/ydnar/wasm-tools-go/cm"
)

// Error represents the variant "wasi:http/types@0.2.0-rc-2023-10-18#error".
//
// See [types.Error] for more information.
type Error = types.Error

// FutureIncomingResponse represents the resource "wasi:http/types@0.2.0-rc-2023-10-18#future-incoming-response".
//
// See [types.FutureIncomingResponse] for more information.
type FutureIncomingResponse = types.FutureIncomingResponse

// OutgoingRequest represents the resource "wasi:http/types@0.2.0-rc-2023-10-18#outgoing-request".
//
// See [types.OutgoingRequest] for more information.
type OutgoingRequest = types.OutgoingRequest

// RequestOptions represents the record "wasi:http/types@0.2.0-rc-2023-10-18#request-options".
//
// See [types.RequestOptions] for more information.
type RequestOptions = types.RequestOptions

// Handle represents function "wasi:http/outgoing-handler@0.2.0-rc-2023-10-18#handle".
//
// The parameter and result types of the `handle` function allow the caller
// to concurrently stream the bodies of the outgoing request and the incoming
// response.
// Consumes the outgoing-request. Gives an error if the outgoing-request
// is invalid or cannot be satisfied by this handler.
//
//	handle: func(request: own<outgoing-request>, options: option<request-options>)
//	-> result<own<future-incoming-response>, error>
//
//go:nosplit
func Handle(request OutgoingRequest, options cm.Option[RequestOptions]) cm.ErrResult[FutureIncomingResponse, Error] {
	var result cm.ErrResult[FutureIncomingResponse, Error]
	wasmimport_Handle(request, options, &result)
	return result
}

//go:wasmimport wasi:http/outgoing-handler@0.2.0-rc-2023-10-18 handle
//go:noescape
func wasmimport_Handle(request OutgoingRequest, options cm.Option[RequestOptions], result *cm.ErrResult[FutureIncomingResponse, Error])
