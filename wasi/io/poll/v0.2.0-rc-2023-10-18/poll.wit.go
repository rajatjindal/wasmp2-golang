// Code generated by wit-bindgen-go. DO NOT EDIT.

//go:build !wasip1

// Package poll represents the interface "wasi:io/poll@0.2.0-rc-2023-10-18".
//
// A poll API intended to let users wait for I/O events on multiple handles
// at once.
package poll

import (
	"github.com/ydnar/wasm-tools-go/cm"
)

// Pollable represents the resource "wasi:io/poll@0.2.0-rc-2023-10-18#pollable".
//
// A "pollable" handle.
//
//	resource pollable
type Pollable cm.Resource

// ResourceDrop represents the Canonical ABI function "resource-drop".
//
// Drops a resource handle.
//
//go:nosplit
func (self Pollable) ResourceDrop() {
	self.wasmimport_ResourceDrop()
}

//go:wasmimport wasi:io/poll@0.2.0-rc-2023-10-18 [resource-drop]pollable
//go:noescape
func (self Pollable) wasmimport_ResourceDrop()

// PollList represents function "wasi:io/poll@0.2.0-rc-2023-10-18#poll-list".
//
// Poll for completion on a set of pollables.
//
// This function takes a list of pollables, which identify I/O sources of
// interest, and waits until one or more of the events is ready for I/O.
//
// The result `list<u32>` contains one or more indices of handles in the
// argument list that is ready for I/O.
//
// If the list contains more elements than can be indexed with a `u32`
// value, this function traps.
//
// A timeout can be implemented by adding a pollable from the
// wasi-clocks API to the list.
//
// This function does not return a `result`; polling in itself does not
// do any I/O so it doesn't fail. If any of the I/O sources identified by
// the pollables has an error, it is indicated by marking the source as
// being reaedy for I/O.
//
//	poll-list: func(in: list<borrow<pollable>>) -> list<u32>
//
//go:nosplit
func PollList(in cm.List[Pollable]) cm.List[uint32] {
	var result cm.List[uint32]
	wasmimport_PollList(in, &result)
	return result
}

//go:wasmimport wasi:io/poll@0.2.0-rc-2023-10-18 poll-list
//go:noescape
func wasmimport_PollList(in cm.List[Pollable], result *cm.List[uint32])

// PollOne represents function "wasi:io/poll@0.2.0-rc-2023-10-18#poll-one".
//
// Poll for completion on a single pollable.
//
// This function is similar to `poll-list`, but operates on only a single
// pollable. When it returns, the handle is ready for I/O.
//
//	poll-one: func(in: borrow<pollable>)
//
//go:nosplit
func PollOne(in Pollable) {
	wasmimport_PollOne(in)
}

//go:wasmimport wasi:io/poll@0.2.0-rc-2023-10-18 poll-one
//go:noescape
func wasmimport_PollOne(in Pollable)
